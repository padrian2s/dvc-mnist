apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: prep-pip-pvc-
spec:
  entrypoint: prep-pip-volume
  arguments:
    parameters:
    - name: azure-storage-connection-string
    - name: azure-container-name
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: my-existing-volume2

  templates:
  - name: prep-pip-volume
    steps:
    - - name: prepare-model-input
        template: prep-pip
        arguments:
          parameters:
          - name: azure-storage-connection-string
            value: "{{workflow.parameters.azure-storage-connection-string}}"
          - name: azure-container-name
            value: "{{workflow.parameters.azure-container-name}}"
    - - name: print
        template: print-message

  - name: prep-pip
    inputs:
      parameters:
      - name: azure-storage-connection-string
      - name: azure-container-name
    nodeSelector:
      pre-pip: pre-pip
    container:
      image: padrian2s/pyjess
      command: [sh, -c]
      args: ["/opt/prep-pip/prep-pipeline.sh"]
      # Mount workdir volume at /mnt/vol before invoking docker/whalesay
      env:
      - name: AZURE_STORAGE_CONNECTION_STRING
        value: "{{inputs.parameters.azure-storage-connection-string}}"
      - name: AZURE_STORAGE_CONTAINER_NAME
        value: "{{inputs.parameters.azure-container-name}}"
      volumeMounts:                     #same syntax as k8s Pod spec
      - name: workdir
        mountPath: /mnt/vol


  - name: print-message
    nodeSelector:
      pre-pip: pre-pip
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["echo getting message from volume; find /mnt/vol;"]
      # Mount workdir volume at /mnt/vol before invoking docker/whalesay
      volumeMounts:                     #same syntax as k8s Pod spec
      - name: workdir
        mountPath: /mnt/vol